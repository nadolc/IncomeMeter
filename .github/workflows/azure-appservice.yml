name: Deploy to Azure App Service

on:
  push:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'development'
        type: choice
        options:
          - development
          - staging
          - production

env:
  DOTNET_VERSION: '9.0.x'
  NODE_VERSION: '18.x'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/incomemeter-app

jobs:
  # Build and Test
  build-and-test:
    name: Build & Test
    runs-on: ubuntu-latest
    
    steps:
    - name: üõ†Ô∏è Checkout code
      uses: actions/checkout@v4
      
    - name: üîß Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: üîß Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: IncomeMeter.Api/frontend/package-lock.json
        
    # Backend Tests
    - name: üì¶ Restore .NET dependencies
      run: dotnet restore IncomeMeter.Api/IncomeMeter.Api.csproj
      
    - name: üî® Build .NET project
      run: dotnet build IncomeMeter.Api/IncomeMeter.Api.csproj --no-restore --configuration Release
      
    - name: üß™ Run .NET tests
      run: |
        if [ -d "IncomeMeter.Api.Tests" ]; then
          dotnet test IncomeMeter.Api.Tests --no-build --configuration Release
        else
          echo "No .NET tests found, skipping..."
        fi
    
    # Frontend Tests
    - name: üì¶ Install frontend dependencies
      working-directory: IncomeMeter.Api/frontend
      run: npm ci
      
    - name: üîç Run ESLint
      working-directory: IncomeMeter.Api/frontend
      run: npm run lint
      
    - name: üß™ Run frontend tests
      working-directory: IncomeMeter.Api/frontend
      run: npm run test -- --coverage --watchAll=false

  # Build and Push Container
  build-container:
    name: Build Container
    runs-on: ubuntu-latest
    needs: [build-and-test]
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    
    steps:
    - name: üõ†Ô∏è Checkout code
      uses: actions/checkout@v4
      
    - name: üîß Setup Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: üîê Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: üìù Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: üî® Build and push image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64

  # Deploy to Development
  deploy-development:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: [build-container]
    if: github.ref == 'refs/heads/develop' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'development')
    environment:
      name: development
      url: ${{ steps.deploy.outputs.webapp-url }}
    
    steps:
    - name: üîê Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS_DEV }}
        
    - name: üöÄ Deploy to Azure Web App
      id: deploy
      uses: azure/webapps-deploy@v2
      with:
        app-name: incomemeter-dev-app
        images: ${{ needs.build-container.outputs.image-tag }}

  # Deploy to Staging  
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-container]
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    environment:
      name: staging
      url: ${{ steps.deploy.outputs.webapp-url }}
    
    steps:
    - name: üîê Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS_STAGING }}
        
    - name: üöÄ Deploy to Azure Web App
      id: deploy
      uses: azure/webapps-deploy@v2
      with:
        app-name: incomemeter-staging-app
        images: ${{ needs.build-container.outputs.image-tag }}

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-container, deploy-staging]
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production'
    environment:
      name: production
      url: ${{ steps.deploy.outputs.webapp-url }}
    
    steps:
    - name: üîê Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS_PROD }}
        
    - name: üöÄ Deploy to Azure Web App
      id: deploy
      uses: azure/webapps-deploy@v2
      with:
        app-name: incomemeter-prod-app
        images: ${{ needs.build-container.outputs.image-tag }}

  # Health Check
  health-check:
    name: Health Check
    runs-on: ubuntu-latest
    needs: [deploy-development, deploy-staging, deploy-production]
    if: always() && (needs.deploy-development.result == 'success' || needs.deploy-staging.result == 'success' || needs.deploy-production.result == 'success')
    
    steps:
    - name: üß™ Test application health
      run: |
        # Determine which environment was deployed
        if [[ "${{ needs.deploy-development.result }}" == "success" ]]; then
          URL="https://incomemeter-api-app-cbf9hubqdhcjh7e5.uksouth-01.azurewebsites.net/"
        elif [[ "${{ needs.deploy-staging.result }}" == "success" ]]; then
          URL="https://incomemeter-api-app-cbf9hubqdhcjh7e5.uksouth-01.azurewebsites.net/"  
        elif [[ "${{ needs.deploy-production.result }}" == "success" ]]; then
          URL="https://incomemeter-api-app-cbf9hubqdhcjh7e5.uksouth-01.azurewebsites.net/"
        fi
        
        echo "Testing health endpoint: $URL/api/diagnostics/health"
        
        # Wait for deployment to be ready
        sleep 60
        
        # Test health endpoint with retries
        for i in {1..10}; do
          if curl -f -s "$URL/api/diagnostics/health" > /dev/null; then
            echo "‚úÖ Health check passed!"
            break
          else
            echo "‚è≥ Health check attempt $i/10 failed, retrying in 30s..."
            sleep 30
          fi
        done